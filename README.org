#+ELEVENTY_COLLECTIONS: _posts
#+ELEVENTY_BASE_DIR: ~/code/static-blog/
#+TITLE: Emacs News Highlights
#+OPTIONS: toc:1

| Talk page            | https://emacsconf.org/2021/talks/news            |rt
| Contact              | Sacha Chua [[mailto:sacha@sachachua.com][sacha@sachachua.com]]                             |
# | Video with subtitles | [[file:emacs-conf-2020-emacs-news-highlights-sacha-chua.webm]] |
# | Audio only           | [[file:audio.ogg]]                                             |

(* 5 150) 750

Draft of my talk for EmacsConf 2021 based on highlights from https://sachachua.com/emacs-news

* Talk plans
:PROPERTIES:
:CUSTOM_ID: script
:END:

#+CAPTION: Emacs News Highlights - emacsconf.org/2021/talks/news
[[file:images/Screenshot_20211021_002952.png]] 

I'm Sacha Chua, and here are 
ten Emacs News highlights for 2021.
If you want to follow the links,
check out the wiki page at
https://emacsconf.org/2021/talks/news/ .

#+CAPTION: 1. Emacs NEWS.28 - git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS.28
[[file:images/Screenshot_20211020_095333.png]]

1. The Emacs developers are currently
   working on [[https://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS.28][Emacs 28.1]],
   which will be the next major release.

   #+CAPTION: Native compilation featured on System Crafters, www.youtube.com/watch?v=i8OLg-f9EHk
   [[file:images/Screenshot_20211020_095812.png]]
   
   [[https://www.youtube.com/watch?v=i8OLg-f9EHk][Native compilation]] should
   make everything way faster,

   #+CAPTION: Emoji support
   [[file:images/emoji.png]]
   
   and emoji support will probably
   make things more fun. üòéüëç
   
   John Wiegley will share more Emacs 28 details
   in his update, so check out his talk.

   #+CAPTION: emacsconf.org/2021/talks/native/
   [[file:images/native-comp.png]]
   Andrea Corallo's giving a talk
   on native compilation too.
   
2.
   #+CAPTION: 2. Org Mode 9.5 - orgmode.org/Changes.html
   [[file:images/Screenshot_20211020_100623.png]]

   [[https://orgmode.org/Changes.html][Org Mode is now at version 9.5]].
   New features include
   a library for [[https://blog.tecosaur.com/tmio/2021-07-31-citations.html#fn.3][managing citations]],

   #+CAPTION: asynchronous session support in Python - blog.tecosaur.com/tmio/2021-05-31-async.html
   [[file:images/org-async-python-demo.mp4]]
   
   [[https://blog.tecosaur.com/tmio/2021-05-31-async.html][asynchronous session support]]
   for code blocks,

   #+CAPTION: New faces for agenda - orgmode.org/Changes.html
   [[file:images/Screenshot_20211020_101636.png]]

   and better control
   of your [[https://orgmode.org/Changes.html][agenda's appearance]].
   
   #+CAPTION: Org Mode 9.5 - orgmode.org/Changes.html
   [[file:images/Screenshot_20211020_100623.png]]
   If you've been getting your Org packages
   from Org ELPA,
   you can update your configuration
   to get Org from GNU ELPA
   and org-contrib from NonGNU ELPA.

   #+CAPTION: Org Roam v2 - blog.jethro.dev/posts/org_roam_v2/
   [[file:images/Screenshot_20211020_101756.png]]

   The [[https://blog.jethro.dev/posts/org_roam_v2/][new release of the Org Roam package]] ([[https://blog.tecosaur.com/tmio/2021-08-38-roaming.html][TMIO]])
   should be a faster and more consistent way
   to use Org to manage a knowledgebase,

   #+CAPTION: Org Roam UI - github.com/org-roam/org-roam-ui/
   [[file:images/org-roam-ui.png]]
   
   and [[https://github.com/org-roam/org-roam-ui/][org-roam-ui]] looks pretty snazzy.

   #+CAPTION: blog.tecosaur.com/tmio
   [[file:images/tmio.png]]   

   The best way to keep up with Org changes
   is to check out the blog [[https://blog.tecosaur.com/tmio/][This Month in Org]].

3.
   #+CAPTION: 3. Magit 3 - emacsair.me/2021/05/25/magit-3.0/
   [[file:images/Screenshot_20211020_102028.png]]

   New [[https://emacsair.me/2021/05/25/magit-3.0/][Magit major release]]!
   Jonas Bernoulli has split some functionality
   into other packages so that
   Emacs Lisp developers can use them, such as
   magit-section, transient, and forge.

   #+CAPTION: (and Bufler Taxy Magit-Section) - www.reddit.com/r/emacs/comments/pkuwcq
   [[file:images/Screenshot_20211020_102147.png]]

   Here's an example of using magit-section to
   [[https://www.reddit.com/r/emacs/comments/pkuwcq/and_bufler_taxy_magitsection_a_concise_language/][manage groups of buffers]].

   #+CAPTION: Self-describing Smart DSLs - emacsconf.org/2021/talks/dsl/
   [[file:images/Screenshot_20211020_102242.png]]

   You can learn more about Transient
   in the talk on [[https://emacsconf.org/2021/talks/dsl/][self-describing 
   smart domain-specific languages]] or DSLs.
   
4. 
   #+CAPTION: 4. Completion - karthinks.com/software/avy-can-do-anything/
   [[file:images/minibuffer-interaction-paradigm.png]]
   In terms of smaller packages, there's been
   a lot of activity around completion.
   [[https://karthinks.com/software/avy-can-do-anything/][Karthik has a great diagram,]]
   #+CAPTION: Default Emacs completion and extras - https://protesilaos.com/codelog/2021-01-06-emacs-default-completion/
   [[file:images/Screenshot_20211024_165646.png]]
   [[https://protesilaos.com/codelog/2021-01-06-emacs-default-completion/][and Prot explains how things work together]].
   I think the idea is that instead of having
   one large completion system
   like Helm or Icicles, you can choose
   a few different, smaller packages
   and configure them to work together.
   If you're curious about this, 
   you might start with either
     
   #+CAPTION: selectrum - github.com/raxod502/selectrum
   [[file:images/Screenshot_20211020_204634.png]]
   [[https://github.com/raxod502/selectrum][selectrum]] 
   #+CAPTION: Vertico - github.com/minad/vertico
   [[file:images/vertico.svg]]
   or [[https://github.com/minad/vertico][vertico]],
   which are both completion interfaces,

   #+CAPTION: marginalia - github.com/minad/marginalia
   [[file:images/Screenshot_20211020_212130.png]]
   add [[https://github.com/minad/marginalia][marginalia]] for more information,

   #+CAPTION: consult - github.com/minad/consult
   [[file:images/consult-grep.gif]]
   and try [[https://github.com/minad/consult][consult]] for many useful
   completing commands.

   #+CAPTION: On completion frameworks - www.reddit.com/r/emacs/comments/ppg98f
   [[file:images/Screenshot_20211020_212308.png]]

   There are so many options, 
   so it might be useful to check out
   [[https://www.reddit.com/r/emacs/comments/ppg98f/which_completion_framework_do_you_use_and_why/][some discussions]].
5. 
   #+CAPTION: 5. Embark - github.com/oantolin/embark
   [[file:images/Screenshot_20211020_212456.png]]
   [[https://github.com/oantolin/embark][Embark]] is usually mentioned as part of  
   that group of packages, 
   but it's well worth looking into
   even if you use a different system. 
   Embark lets you have context-sensitive shortcuts
   that work on things in buffers, minibuffers,
   and even collections of things.
   You can also use it
   when you start doing one command
   and then decide to do a different one instead.
   #+CAPTION: Fifteen ways to use Embark - karthinks.com/software/fifteen-ways-to-use-embark/
   [[file:images/Screenshot_20211020_212529.png]]
   For more ideas, check out 
   [[https://karthinks.com/software/fifteen-ways-to-use-embark/][Fifteen Ways to Use Embark]].
   
6. 
   #+CAPTION: Tree-sitter-powered editing - https://emacsconf.org/2021/talks/structural/
   [[file:images/Screenshot_20211022_171008.png]]
   Now that there are Emacs Lisp bindings 
   for tree-sitter, we can work more easily
   with the structure of code instead of 
   just using regular expressions.
   Check out the talk
   on [[https://emacsconf.org/2021/talks/structural/][Tree-edit and structural editing]]
   to learn more.
   #+CAPTION: 6. tree-sitter-powered Emacs Lisp - blog.meain.io/2021/intelligent-snippets-treesitter/
   [[file:images/Screenshot_20211020_212756.png]]
   You can use tree-sitter for
   [[https://blog.meain.io/2021/intelligent-snippets-treesitter/][intelligent snippets]] that get information 
   from the code around them,
   #+CAPTION: github.com/polaris64/symex-ts
   [[file:images/Screenshot_20211020_213017.png]]
   [[https://github.com/polaris64/symex-ts][editing Lisp expressions]], 
   #+CAPTION: github.com/meain/evil-textobj-tree-sitter
   [[file:images/evil-textobj.gif]]
   and [[https://github.com/meain/evil-textobj-tree-sitter][navigating text objects in Evil mode.]] 
   (That's when Emacs is pretending to be Vi.) 
   Dynamic modules help us add more to Emacs 
   than Emacs Lisp easily offers,
   #+CAPTION: GopCaml - www.youtube.com/watch?v=KipRuiLXYEo
   [[file:images/Screenshot_20211020_213235.png]]
   such as [[https://www.youtube.com/watch?v=KipRuiLXYEo][structural editing in OCaml]]
   #+CAPTION: parinfer-rust - github.com/justinbarclay/parinfer-rust-mode
   [[file:images/parinfer-rust.gif]]
   and [[https://github.com/justinbarclay/parinfer-rust-mode#installing][using Rust to figure out parentheses]]
   and indentation for Lisp.
   #+CAPTION: Extending Emacs in Rust with Dynamic Modules - emacsconf.org/2021/talks/rust/
   [[file:images/Screenshot_20211020_213423.png]]
   If you're curious,
   check out the talk on
   [[https://emacsconf.org/2021/talks/rust/][Extending Emacs in Rust with Dynamic Modules]].
7. 
   #+CAPTION: 7. CRDT - collaborative editing - elpa.gnu.org/packages/crdt.html
   [[file:images/Screenshot_20211020_213543.png]]
   Collaborative editing is now much easier 
   since the [[https://elpa.gnu.org/packages/crdt.html][CRDT]] package is in GNU ELPA. ([[https://www.reddit.com/r/emacs/comments/pdi08v/crdtel_the_collaborative_editing_package_now_on/][Reddit]]) 
   It allows multiple people to edit 
   the same file over the network, 
   using their own Emacs. 
   This means you can keep your own config
   and keybindings, yay! 
   #+CAPTION: Emacs Research Group - emacsconf.org/2021/talks/erg/
   [[file:images/Screenshot_20211020_213619.png]]
   Watch the [[https://emacsconf.org/2021/talks/erg/][Emacs Research Group talk]] 
   for an example of how several people 
   used it to work together.
8.
   #+CAPTION: 8. More graphical experiments: OpenGL - www.reddit.com/r/emacs/comments/kn3fzq
   [[file:images/opengl.png]]
   In case you're still under the impression 
   that Emacs is just a text editor, 
   some folks have been working on 
   pretty neat graphical experiments.
   These [[https://www.reddit.com/r/emacs/comments/kn3fzq/draw_anything_to_emacs_buffers_with_opengl/][OpenGL bindings for Emacs Lisp]] 
   use an embedded xwidget,
   while other prototypes use the SVG support
   that's built into Emacs
   #+CAPTION: Gantt charts - github.com/Aightech/org-gantt-svg
   [[file:images/Screenshot_20211020_214059.png]]
   for [[https://github.com/Aightech/org-gantt-svg][Gantt charts]] ([[https://www.reddit.com/r/emacs/comments/prezj6/simple_gantt_chart_from_an_org_todo_list_with_svg/][Reddit]]),

   #+CAPTION: Scribble - lifeofpenguin.blogspot.com/2021/08/scribble-notes-in-gnu-emacs.html
   [[file:images/scribble.png]]
   [[https://lifeofpenguin.blogspot.com/2021/08/scribble-notes-in-gnu-emacs.html][scribbles]],
   #+CAPTION: el-easydraw - www.reddit.com/r/emacs/comments/pvtbq5
   [[file:images/Screenshot_20211020_214428.png]]
   and even [[https://www.reddit.com/r/emacs/comments/pvtbq5/emacs_drawing_tool/][diagrams]]. ([[https://www.reddit.com/r/emacs/comments/pvtbq5][Reddit]])
   #+CAPTION: el-easydraw color picker - github.com/misohena/el-easydraw
   [[file:images/color-picker-minibuffer.png]]
   The color-picker from that one 
   looks particularly useful for CSS.
   If you want to play around with adding SVGs 
   to your files and interfaces,
   #+CAPTION: svg-icon - github.com/rougier/emacs-svg-icon
   [[file:images/svg-icons.png]]
   [[https://github.com/rougier/emacs-svg-icon][svg icon]]
   #+CAPTION: svg-lib - elpa.gnu.org/packages/svg-lib.html
   [[file:images/svg-lib.png]]
   and [[https://elpa.gnu.org/packages/svg-lib.html][svg-lib]] 
   might be good places to start. ([[https://www.reddit.com/r/emacs/comments/pyee44/svglib_is_on_elpa/][Reddit]])
   Of course, there's always a place 
   for ASCII art,
   #+CAPTION: boxy-headings - www.reddit.com/r/emacs/comments/q2z29f
   [[file:images/boxy-headings.gif]]
   especially with the new [[https://gitlab.com/tygrdev/boxy][boxy]] package
   that you can use for [[https://www.reddit.com/r/emacs/comments/q2z29f/boxyheadlines_and_orgreal_are_now_on_elpa/][org files]],
   #+CAPTION: boxy-imenu - gitlab.com/tygrdev/boxy-imenu
   [[file:images/boxy-imenu.gif]]
   [[https://gitlab.com/tygrdev/boxy-imenu][imenu navigation]],
   #+CAPTION: org-real - gitlab.com/tygrdev/org-real
   [[file:images/org-real.gif]]
   and even [[https://gitlab.com/tygrdev/org-real][things in real life]].
9. 
   #+CAPTION: 9. Lots of posts and videos: System Crafters... - systemcrafters.cc/
   [[file:images/Screenshot_20211021_002413.png]]
   There have been a lot of great posts, videos,
   and livestreams about Emacs this year.
   In addition to the ones from [[https://systemcrafters.cc/][System Crafters]],
   #+CAPTION: Emacs Elements... - www.youtube.com/channel/UCe5excZqMeG1CIW-YhMTCEQ
   [[file:images/Screenshot_20211021_002120.png]]
   [[https://www.youtube.com/channel/UCe5excZqMeG1CIW-YhMTCEQ][Emacs Elements]],
   #+CAPTION: Protesilaos Stavrou... - protesilaos.com/
   [[file:images/Screenshot_20211021_002254.png]]
   and [[https://protesilaos.com/][Protesilaos]],
   #+CAPTION: John Kitchin... - www.youtube.com/user/jrkitchin
   [[file:images/Screenshot_20211021_002218.png]]
   [[https://www.youtube.com/user/jrkitchin][John Kitchin]]
   #+CAPTION: Mike Zamansky - cestlaz.github.io/categories/emacs/
   [[file:images/Screenshot_20211021_002452.png]]
   and [[https://cestlaz.github.io/categories/emacs/][Mike Zamansky]] 
   are both back, hooray!
10. 
    #+CAPTION: 10. #emacs on libera.chat - www.emacswiki.org/emacs/EmacsChannel
    [[file:images/Screenshot_20211021_002604.png]]
    Lastly, if you want to chat 
    with other Emacs folks
    and get help on Emacs, Org Mode, 
    or other topics, the #emacs and #org-mode
    Internet Relay Chat or IRC channels
    are now on the [[https://libera.chat]] network
    instead of Freenode. ([[https://www.emacswiki.org/emacs/EmacsChannel][EmacsWiki]])

#+CAPTION: Emacs News Highlights - emacsconf.org/2021/talks/news
[[file:images/Screenshot_20211021_002952.png]]

If you'd like to add something I've missed,
please add them to the [[https://emacsconf.org/2021/talks/news][wiki page]], 
or e-mail me at [[mailto:sacha@sachachua.com][sacha@sachachua.com]] . 
That's all for this quick review. 
Enjoy the rest of EmacsConf 2021!


* Tasks and ideas
** WAITING Coordinate with johnw
:LOGBOOK:
- State "WAITING"    from "TODO"       [2021-10-20 Wed 09:48] \\
  Waiting for update
:END:
* Code

I've extracted the code I used to record the presentation and put it
up at https://github.com/sachac/subed-record .

Other things I'm using:

** Copy images
#+begin_src emacs-lisp
(defvar my-talk-script-heading "Talk plans")
(defvar my-talk-asset-dir "images")
(defun my-talk-copy-assets-to-subdir ()
  (interactive)
  (save-excursion
    (save-restriction
      (narrow-to-region (org-back-to-heading) (save-excursion (org-end-of-subtree)))
      (let (link link-start link-end filename)
        (while (re-search-forward org-link-bracket-re nil t)
          (setq link-start (match-beginning 0)
                link-end (match-end 0)
                link (org-link-unescape (match-string-no-properties 1)))
          (when (and (string-match "^file:\\(.*\\)" link)
                     (setq filename (match-string 1 link))
                     (not (file-in-directory-p filename my-talk-asset-dir)))
            (copy-file filename (expand-file-name (file-name-nondirectory filename) my-talk-asset-dir) t)
            (setq filename (expand-file-name (file-name-nondirectory filename) my-talk-asset-dir))
            (delete-region link-start link-end)
            (insert (org-link-make-string (concat "file:" (file-relative-name filename "."))))))))))
          
#+end_src

#+RESULTS:
:results:
my-talk-copy-assets-to-subdir
:end:

** Emoji support
(set-fontset-font "fontset-default" 'symbol "Noto Color Emoji" nil 'prepend)
** SVG screenshots
https://www.reddit.com/r/emacs/comments/idz35e/emacs_27_can_take_svg_screenshots_of_itself/
#+begin_src emacs-lisp
(defun screenshot-svg ()
  "Save a screenshot of the current frame as an SVG image.
Saves to a temp file and puts the filename in the kill ring."
  (interactive)
  (let* ((data (x-export-frames nil 'svg))
         (filename (expand-file-name (format-time-string "%Y-%m-%d-%H%M%S.svg") my-screenshot-directory)))
    (with-temp-file filename 
      (insert data))
    (kill-new filename)
    (message filename)))
(defun my-copy-last-screenshot-to-file (new-filename)
  (interactive (list (read-file-name (format "Copy %s to: " (file-name-nondirectory (my-latest-file my-screenshot-directory))))))
  (copy-file (my-latest-file my-screenshot-directory) new-filename))

(defun my-copy-last-screenshot-and-insert-into-org (new-filename caption)
  (interactive (list (read-file-name (format "Copy %s to: " (file-name-nondirectory (my-latest-file my-screenshot-directory))))
                     (read-string "Caption: ")))
  (copy-file (my-latest-file my-screenshot-directory) new-filename)
  (insert "#+CAPTION: " caption "\n"
          (org-link-make-string (concat "file:" (file-relative-name new-filename))) "\n"))
    #+end_src

    #+RESULTS:
    :results:
    my-copy-last-screenshot-and-insert-into-org
    :end:
** Emacs screen recording

#+begin_src emacs-lisp
(defvar my-record-ffmpeg-process nil)
(defvar my-record-ffmpeg-screen-recording-filename "/tmp/test.mkv")
(defun my-record-ffmpeg-toggle-recording ()
  (interactive)
  (if (process-live-p my-record-ffmpeg-process)
      (progn
        (my-record-ffmpeg-stop-recording-screen)
        (message "Stopped."))
    (progn
      (my-record-ffmpeg-start-recording-screen)
      (message "Recording..."))))
                                          
(defun my-record-ffmpeg-start-recording-screen ()
  (interactive)
  (my-record-ffmpeg-stop-recording-screen)
  (setq my-record-ffmpeg-process
        (start-process "ffmpeg" nil my-record-ffmpeg-executable
                       "-y"
                       "-f" "x11grab" "-r" "25" "-i" ":0.0" "-f" "pulse" "-i" "default" "-preset" "ultrafast" "-crf" "18" "-qscale" "0" my-record-ffmpeg-screen-recording-filename)))
(defun my-record-ffmpeg-stop-recording-screen ()
  (interactive)
  (if (process-live-p my-record-ffmpeg-process)
      (quit-process my-record-ffmpeg-process)))
(defun my-record-ffmpeg-review-recording ()
  (interactive)
  (mpv-play my-record-ffmpeg-screen-recording-filename ))
#+end_src

#+RESULTS:
:results:
my-record-ffmpeg-review-recording
:end:

* Backstory
- previous
  - Record everything, edit in Audacity, and then align afterwards in Emacs or via YouTube
  - Easiest audio editing, but time info gets lost, have to do it again afterwards. Also editing is a little mouse-heavy, but I guess that's okay
- rough outline
- filled in with top posts, review of Emacs News Highlights
- draft
- links
- wrapped at ~49 characters with help from display-fill-column-indicator-mode
- recorded audio using a hydra to capture timestamps
- keyboard sound was too loud
- web interface
- tried using Georgi keyboard, still a bit loud

- visuals
  - collecting
  - compiling
    - images
    - animated GIFs
    - speeding up videos
- burning in descriptions
- display waveforms
- buttons? but I can't seem to move the point from a button lambda.
- ugh. Next attempt: record longer segments, and then split things
  afterwards

* Links from figuring things out
** GitHub - larsmagne/wave: Editing and (auto-)splitting PCM files from Emacs
:PROPERTIES:
:CREATED:  [2021-10-20 Wed 09:26]
:END:

https://github.com/larsmagne/wave
https://lars.ingebrigtsen.no/2011/04/17/editing-sound-files-in-emacs/amp/
* Image credits and sources

- async-python-demo: https://blog.tecosaur.com/tmio/2021-05-31-async.html
- org-roam-ui image: [[https://github.com/org-roam/org-roam-ui][org-roam-ui homepage]]
- bufler taxy magit-section: [[https://www.reddit.com/r/emacs/comments/pkuwcq/and_bufler_taxy_magitsection_a_concise_language/][github-alphapapa]]
- consult-grep animated gif: https://github.com/minad/consult
- orderless screenshot: https://github.com/oantolin/orderless  
- evil-textobj animated gif: https://github.com/meain/evil-textobj-tree-sitter
- parinfer-rust animated gif: https://github.com/justinbarclay/parinfer-rust-mode
- opengl: [[https://www.reddit.com/r/emacs/comments/kn3fzq/draw_anything_to_emacs_buffers_with_opengl/][SnowyHarbor]]
- SVG modelines: https://github.com/ocodo/ocodo-svg-modelines
- Gantt chart: https://github.com/Aightech/org-gantt-svg
- scribble: https://lifeofpenguin.blogspot.com/2021/08/scribble-notes-in-gnu-emacs.html
- el-easydraw diagrams, color picker: https://github.com/misohena/el-easydraw
- svg-icons: https://github.com/rougier/emacs-svg-icon
- svg-lib: https://github.com/rougier/svg-lib
- boxy-headings animated gif: https://gitlab.com/tygrdev/boxy-headings
- boxy-imenu animated gif: https://gitlab.com/tygrdev/boxy-imenu
- org-real animated gif: https://gitlab.com/tygrdev/org-real
- minibuffer interaction paradigm: https://karthinks.com/software/avy-can-do-anything/
